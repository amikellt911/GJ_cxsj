<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0073)http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfObjectOrientedDesign -->
<HTML><HEAD><TITLE>ArticleS.UncleBob.PrinciplesOfObjectOrientedDesign</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8"><LINK 
media=screen 
href="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/fitnesse.css" 
type=text/css rel=stylesheet><LINK media=print 
href="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/fitnesse_print.css" 
type=text/css rel=stylesheet>
<SCRIPT 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/fitnesse.js" 
type=text/javascript></SCRIPT>

<META content="MSHTML 6.00.3790.2577" name=GENERATOR></HEAD>
<BODY>
<DIV class=sidebar>
<DIV class=art_niche onclick="document.location='/'"></DIV>
<DIV class=actions><!--Edit button--><A accessKey=e 
href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfObjectOrientedDesign?edit">Edit</A> 
<!--Versions button--><A accessKey=v 
href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfObjectOrientedDesign?versions">Versions</A> 
<!--Properties button--><A accessKey=p 
href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfObjectOrientedDesign?properties">Properties</A> 
<!--Refactor button--><A accessKey=r 
href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfObjectOrientedDesign?refactor">Refactor</A> 
<!--Where Used button--><A accessKey=w 
href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfObjectOrientedDesign?whereUsed">Where 
Used</A> 
<DIV class=nav_break>&nbsp;</DIV><!--RecentChanges button--><A accessKey="" 
href="http://butunclebob.com/RecentChanges">RecentChanges</A> <!--Files button--><A accessKey=f href="http://butunclebob.com/files">Files</A> <!--Search button--><A accessKey=s 
href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfObjectOrientedDesign?searchForm">Search</A> 
</DIV></DIV>
<DIV class=mainbar>
<DIV class=header><A href="http://butunclebob.com/ArticleS">ArticleS</A>. <A 
href="http://butunclebob.com/ArticleS.UncleBob">UncleBob</A>. <BR><SPAN 
class=page_title>PrinciplesOfObjectOrientedDesign</SPAN> </DIV>
<DIV class=main>
<DIV style="WIDTH: 99%; POSITION: absolute; TOP: 83px; TEXT-ALIGN: right"><SPAN 
class=meta>Last modified by david on Mar 12, 2006 at 12:45:00 PM</SPAN> </DIV>
<DIV style="Z-INDEX: 1; WHITE-SPACE: nowrap; postion: relative"><A 
href="http://butunclebob.com/FrontPage">Home</A> | <A 
href="http://butunclebob.com/TitlePage">Recent Titles</A> | <A 
href="http://butunclebob.com/NewS">News</A> | <A 
href="http://butunclebob.com/RssFeed">RSS</A> | <A 
href="http://butunclebob.com/GeneralComments">Comments</A> | <A 
href="http://butunclebob.com/GuestList">Guest List</A> | <A 
href="mailto:unclebob@objectmentor.com">Contact Us</A> | <A 
href="http://butunclebob.com/HowToUseThisSite">Help</A></DIV>
<HR>

<H3>
<DIV class=centered>The Principles of OOD</DIV></H3>
<HR>
<BR>What is object oriented design? What is it all about? What are it's 
benefits? What are it's costs? It may seem silly to ask these questions in a day 
and age when virtually every software developer is using an object oriented 
language of some kind. Yet the question is important because, it seems to me, 
that most of us use those languages without knowing why, and without knowing how 
to get the the most benefit out of them.<BR><BR>Of all the revolutions that have 
occurred in our industry, two have been so successful that they have permeated 
our mentality to the extent that we take them for granted. Structured 
Programming and Object Oriented Programming. All of our mainstream modern 
languages are strongly influenced by these two disciplines. Indeed, it has 
become difficult to write a program that does not have the external appearance 
of both structured programming and object oriented programming. Our mainstream 
languages do not have <B>goto</B>, and therefore appear to obey the most famous 
proscription of structured programming. Most of our mainstream languages are 
class based and do not support functions or variables that are not within a 
class, therefore they appear to obey the most obvious trappings of object 
oriented programming.<BR><BR>Programs written in these languages may look 
structured and object oriented, but looks can be decieving. All too often 
today's programmers are unaware of the principles that are the foundation of the 
disciplines that their languages were derived around. In another blog I'll 
discuss the principles of structured programming. In this blog I want to talk 
about the principles of object oriented programming.<BR><BR>In March of 1995, in 
comp.object, I wrote an <A href="http://tinyurl.com/84emx">article</A> that was 
the first glimmer of a set of principles for OOD that I have written about many 
times since. You'll see them documented in my <A 
href="http://www.objectmentor.com/PPP">PPP</A> book, and in many articles on <A 
href="http://www.objectmentor.com/">the objectmentor website</A>, including a 
well known <A 
href="http://www.objectmentor.com/resources/articles/Principles_and_Patterns.PDF">summary</A>. 
<BR><BR>These principles expose the dependency management aspects of OOD as 
opposed to the conceptualization and modeling aspects. This is not to say that 
OO is a poor tool for conceptualization of the problem space, or that it is not 
a good venue for creating models. Certainly many people get value out of these 
aspects of OO. The principles, however, focus very tightly on dependency 
management.<BR><BR>Dependency Management is an issue that most of us have faced. 
Whenever we bring up on our screens a nasty batch of tangled legacy code, we are 
experiencing the results of poor dependency management. Poor dependency 
managment leads to code that is hard to change, fragile, and non-reusable. 
Indeed, I talk about several different <I>design smells</I> in the PPP book, all 
relating to dependency management. On the other hand, when dependencies are well 
managed, the code remains flexible, robust, and reusable. So dependency 
management, and therefore these principles, are at the foudation of the 
<I>-ilities</I> that software developers desire.<BR><BR>The first five 
principles are principles of <I>class design</I>. They are:<BR>
<TABLE cellSpacing=0 border=1>
  <TBODY>
  <TR>
    <TD><B>SRP</B></TD>
    <TD><A href="http://www.objectmentor.com/resources/articles/srp">The 
      Single Responsibility Principle</A></TD>
    <TD><I>A class should have one, and only one, reason to change.</I></TD></TR>
  <TR>
    <TD><B>OCP</B></TD>
    <TD><A href="http://www.objectmentor.com/resources/articles/ocp.pdf">The 
      Open Closed Principle</A></TD>
    <TD><I>You should be able to extend a classes behavior, without modifying 
      it.</I></TD></TR>
  <TR>
    <TD><B>LSP</B></TD>
    <TD><A href="http://www.objectmentor.com/resources/articles/lsp.pdf">The 
      Liskov Substitution Principle</A></TD>
    <TD><I>Derived classes must be substitutable for their base 
  classes.</I></TD></TR>
  <TR>
    <TD><B>DIP</B></TD>
    <TD><A href="http://www.objectmentor.com/resources/articles/dip.pdf">The 
      Dependency Inversion Principle</A></TD>
    <TD><I>Depend on abstractions, not on concretions.</I></TD></TR>
  <TR>
    <TD><B>ISP</B></TD>
    <TD><A href="http://www.objectmentor.com/resources/articles/isp.pdf">The 
      Interface Segregation Principle</A></TD>
    <TD><I>Make fine grained interfaces that are client 
  specific.</I></TD></TR></TBODY></TABLE><BR>The next six principles are about 
packages. In this context a package is a binary deliverable like a .jar file, or 
a dll as opposed to a namespace like a java package or a C++ 
namespace.<BR><BR>The first three package principles are about package 
<I>cohesion</I>, they tell us what to put inside packages:<BR><BR>
<TABLE cellSpacing=0 border=1>
  <TBODY>
  <TR>
    <TD><B>REP</B></TD>
    <TD><A 
      href="http://www.objectmentor.com/resources/articles/granularity.pdf">The 
      Release Reuse Equivalency Principle</A></TD>
    <TD><I>The granule of reuse is the granule of release.</I></TD></TR>
  <TR>
    <TD><B>CCP</B></TD>
    <TD><A 
      href="http://www.objectmentor.com/resources/articles/granularity.pdf">The 
      Common Closure Principle</A></TD>
    <TD><I>Classes that change together are packaged together.</I></TD></TR>
  <TR>
    <TD><B>CRP</B></TD>
    <TD><A 
      href="http://www.objectmentor.com/resources/articles/granularity.pdf">The 
      Common Reuse Principle</A></TD>
    <TD><I>Classes that are used together are packaged 
  together.</I></TD></TR></TBODY></TABLE><BR>The last three principles are about 
the couplings between packages, and talk about metrics that evaluate the package 
structure of a system. <BR><BR>
<TABLE cellSpacing=0 border=1>
  <TBODY>
  <TR>
    <TD><B>ADP</B></TD>
    <TD><A 
      href="http://www.objectmentor.com/resources/articles/granularity.pdf">The 
      Acyclic Dependencies Principle</A></TD>
    <TD><I>The dependency graph of packages must have no cycles.</I></TD></TR>
  <TR>
    <TD><B>SDP</B></TD>
    <TD><A 
      href="http://www.objectmentor.com/resources/articles/stability.pdf">The 
      Stable Dependencies Principle</A></TD>
    <TD><I>Depend in the direction of stability.</I></TD></TR>
  <TR>
    <TD><B>SAP</B></TD>
    <TD><A 
      href="http://www.objectmentor.com/resources/articles/stability.pdf">The 
      Stable Abstractions Principle</A></TD>
    <TD><I>Abstractness increases with stability.</I></TD></TR></TBODY></TABLE><BR>
<HR>
<BR>
<FORM action=ArticleS.UncleBob.PrinciplesOfObjectOrientedDesign 
method=post><INPUT type=hidden value=addBlogComment name=responder> <INPUT 
type=hidden value="Thu, 16 Mar 2006 07:08:20" name=date> <INPUT type=hidden 
value=ArticleS.UncleBob.PrinciplesOfObjectOrientedDesign name=sourcePage> Your 
Name: <INPUT name=bloggerName> Subject: <INPUT size=80 name=subject> <BR><TEXTAREA name=comment rows=6 cols=80></TEXTAREA> <BR><INPUT type=submit value="Append Comment" name=blog> </FORM><BR><BR>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('5790323220838375101');"><IMG class=left 
id=img5790323220838375101 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Wed, 11 May 2005 20:27:08, Shane, Buy the 
Book!</SPAN> 
<DIV class=collapsable id=5790323220838375101>I would encourage anyone reading 
and thinking "I need to know more about this stuff" to buy the book that Bob 
wrote and refers to (PPP).</DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('6064614755187688328');"><IMG class=left 
id=img6064614755187688328 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Thu, 12 May 2005 10:37:50, Henrik Huttunen, Some 
praise</SPAN> 
<DIV class=collapsable id=6064614755187688328>These principles are taught at our 
university in a course, where we take second big step toward OO-programming i.e. 
learning to program with design patterns. I consider the first five to be very 
important for to get deeper understanding of programming. They've changed my 
thinking somewhat, and it's nice to check your solution against those principles 
and see what they might reveal.<BR>Also, I have read many articles of yours, and 
I like them very much. The way you present the problems and different methods to 
handle them, are clear and profound. And you have made good points about why to 
write tests before any code; it surely makes programming less painful, when need 
of debuggin is decreased alot.<BR>It's a shame you haven't lately written large 
articles -- at least don't know any. But at least this blog and newgroup 
discussing are active.<BR><BR>Sincerely, Henrik</DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('2231657223538046678');"><IMG class=left 
id=img2231657223538046678 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Thu, 12 May 2005 11:41:21, Uncle Bob, Writing Large 
Articles.</SPAN> 
<DIV class=collapsable id=2231657223538046678>Henrik,<BR><BR>I have a regular 
column in Software Development magazine. It's called "The Crafstman". In it I 
write a lot about TDD, Principles, Patterns, and life on a starship. You can see 
a list of all these article at: 
<B>http://www.objectmentor.com/resources/listArticles?key=topic&amp;topic=Craftsman</B><BR><BR>I 
also write feature articles for this magazine from time to time, and for other 
magazines as well. You can keep track of them, and all the articles the Object 
Mentors write at 
<B>http://www.objectmentor.com/resources/articleIndex</B><BR></DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('-6575689829229858815');"><IMG class=left 
id=img-6575689829229858815 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Thu, 12 May 2005 12:00:20, Henrik Huttunen, 
Articles</SPAN> 
<DIV class=collapsable id=-6575689829229858815>Robert,<BR><BR>yes thank you, I'm 
aware of those. I just wondered you hadn't done any article this year, that's 
all.<BR>Btw. I'm buying a new book about refactoring/TDD/design patterns in 
general, and would like to hear recommendations. Refactoring to Patterns by 
Joshua Kerievsky is often recommended, but someone said it has too application 
specific examples. If someone has read it, I'd like to hear comment on 
that.</DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('-2014900438780355458');"><IMG class=left 
id=img-2014900438780355458 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Sun, 15 May 2005 05:13:44, Mauro Marinilli, Praise 
again and a hint for Henrik</SPAN> 
<DIV class=collapsable id=-2014900438780355458>I use to read so much about OOP, 
but your advice always sounds proven and deep. It's something else!<BR>Keep up 
your good, honest work. <BR><BR>OOP is too flexible. You can use it for 
everything and the opposite of everything. That's why it got so popular, 
perhaps. Principles then are always controverse, though. What happened for 
example to the fundamentalists of encapsulation (those that refuse to design or 
even use setter/getters)? Also structured programming isn't a silver bullet, and 
exaggerating with it make things worse (at least this is what I try to teach to 
my students.. Shame on me!). That's why your advice is so important: because it 
is empirically grounded. <BR><BR>Henrik: as of Refactoring to Patterns, I'd 
suggest you to have a look at an earlier draft 
(<B>http://scholar.google.com/url?sa=U&amp;q=http://www.tarrani.net/RefactoringToPatterns.pdf</B>) 
that contains half of the patterns but gives you a feeling of the overall 
approach (sorry if I use this space to reply to another reply).</DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('-7960039448736860166');"><IMG class=left 
id=img-7960039448736860166 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Mon, 16 May 2005 07:32:54, Henrik Huttunen, 
Refactoring to Patterns</SPAN> 
<DIV class=collapsable id=-7960039448736860166>Mauro, thanks for the link 
:).</DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('-4251909209382447857');"><IMG class=left 
id=img-4251909209382447857 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Fri, 20 May 2005 19:30:44, Mark Dalrymple, 
Refactoring to Patterns</SPAN> 
<DIV class=collapsable id=-4251909209382447857>Refactoring to Patterns is 
awesome. The examples do deal with real domain-specific code, but the principles 
are applicable to other domains.</DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('420897852127660975');"><IMG class=left 
id=img420897852127660975 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Fri, 20 May 2005 23:15:19, JDCarroll, Almost 
right</SPAN> 
<DIV class=collapsable id=420897852127660975>You begin by talking about OOD and 
by the end of the first paragraph have made the most critical of errors: 
equating OOD with OOP. OOA/D is about THINKING. OOP is about DOING. The two are 
separate. <BR>
<UL>
  <LI><I>It took me over half a decade to realize that this wasn't true. OOP and 
  OOD are inseparable. OOA is undefined.</I> <B>- UB</B> </LI></UL>And the only 
criteria by which a OO programming language should be judged is the ability to 
move from one to the other. <BR>Then you move into the notion of Dependency 
Management as if the way that we think about and write the programs will make it 
right. Sorry. But whether you live in a Structured world or an Object world the 
notion of dependancies doesn't change. Folks write code that you depend on. You 
write code that other folks depend on.<BR><BR>Until that changes, we're 
stuck.<BR><BR>
<UL>
  <LI><I>No, we aren't stuck. Dependencies are manageable.</I> <B>- UB</B> 
</LI></UL></DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('160267687270489476');"><IMG class=left 
id=img160267687270489476 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Tue, 7 Jun 2005 02:46:09, cheng jing, when and how 
add database</SPAN> 
<DIV class=collapsable id=160267687270489476>I read your wonderful book &lt; 
agile software development &gt;, At chapter 19, u implement the payroll system. 
<BR>Now I design a true PayRoll<A 
href="http://butunclebob.com/ArticleS.UncleBob.PayRoll?edit">?</A> system, but i 
don't known when and how can i add database detail ? i can add UI first then 
meet the client's requirement ?<BR><BR>
<UL>
  <LI>I recommend that you concentrate on the business rules first. Don't worry 
  about the UI or the Database at first. Get the business rules (taxes, 
  deductions, etc) to work. Then you can add a database. And finally you can add 
  a UI. - <B>UB</B> </LI></UL></DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('4601091636186287564');"><IMG class=left 
id=img4601091636186287564 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Sun, 12 Jun 2005 04:31:44, Brad Appleton, Where does 
The Law of Demeter fit?</SPAN> 
<DIV class=collapsable id=4601091636186287564>Hi Bob!<BR>Granted, the "Law of 
Demeter" is a style guideline rather than a principle. Nonetheless, I would 
expect it to be something that could be readily derived from a handful of these 
principles. Do you agree? if so, how would you derive it? <BR><BR>
<UL>
  <LI>LOD is a matter of dependencies. A statement like 
  system.trunk.line.lineCard.connect() concentrates too much information into a 
  single place. That one line of code knows about four classes! Large knots of 
  dependencies like this are a violation of the OCP. Any change to the data 
  structures causes changes to that line of code. </LI></UL></DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('-6819402305918174861');"><IMG class=left 
id=img-6819402305918174861 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Mon, 13 Jun 2005 02:35:41, , </SPAN>
<DIV class=collapsable id=-6819402305918174861></DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('3931710435442720136');"><IMG class=left 
id=img3931710435442720136 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Fri, 17 Jun 2005 07:27:50, Denis Krukovsky, SRP with 
Observable model?</SPAN> 
<DIV class=collapsable id=3931710435442720136>Can we start a discussion here? 
Let's say we have a Model of some entity, say a ForumTopic<A 
href="http://butunclebob.com/ArticleS.UncleBob.ForumTopic?edit">?</A>. We give 
it the responsibility to represent a forum topic. Now a classic case - we want 
our Models to be Observable. So we add a responsibility to notify its Observers 
on state change. SRP violation.<BR><BR>How to make ForumTopic<A 
href="http://butunclebob.com/ArticleS.UncleBob.ForumTopic?edit">?</A> respect 
SRP while apply Observer pattern here?<BR><BR>Denis 
Krukovsky<BR><B>http://dotuseful.sourceforge.net/</B><BR><B>http://dkrukovsky.blogspot.com/</B><BR><BR>
<UL>
  <LI>You could use the <I>class form</I> of the <I>Adapter Pattern</I> (i.e. 
  Multiple Inheritance) as follows: </LI></UL><PRE>    |ForumTopic|    |Observable|
          A              A
          |              |
          +-------+------+
                  |
          |OservableForumTopic|
</PRE>- <B>UB</B><BR></DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('3654872181802646841');"><IMG class=left 
id=img3654872181802646841 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Mon, 20 Jun 2005 19:59:43, Don, ISP and accessing 
multiple non-cohesive interfaces</SPAN> 
<DIV class=collapsable id=3654872181802646841>Thanks for your Agile Software 
Development book - a great resource. I have a question concerning ISP. The 
second paragraph explicitly states that some objects require non-cohesive 
interfaces. So I have an object O with two non-cohesive interfaces A and B. My 
question is this - when a client has access to O as an instance of A, and then 
at some point needs access to O as an instance of B, how is that managed? My 
instinct tells me to use a factory for the conversion so that the knowledge that 
A and B are coresident in O is isolated (allowing adapters and other 
alternatives) but I am not confident. Any advice welcome. Thanks 
again.</DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('-4277683362244252169');"><IMG class=left 
id=img-4277683362244252169 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Sat, 9 Jul 2005 00:40:56, Jay Levitt, Principles same 
w/dynamic languages?</SPAN> 
<DIV class=collapsable id=-4277683362244252169>I'm reading through PPP tonight, 
and it's a fascinating book. But the examples you use to illustrate design 
smells seem to be dependent on the use of a statically-typed language like C++, 
with solutions involving virtual base classes and/or MI. <BR><BR>I'm playing 
around with Ruby, which has none of the above, and at first blush it seems to me 
that a lot of the "binding" issues simply don't exist there; LSP is inherently 
enforced by "duck-typing", and classes can be extended repeatedly in different 
source files, providing ISP. As such, SRP and OCP just don't seem to matter. 
Have there been any discussions or articles about how these principles apply to 
dynamic languages?</DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('5482148700495939446');"><IMG class=left 
id=img5482148700495939446 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Fri, 30 Sep 2005 08:03:26, Brijesh, I finished 
reading ur book PPP</SPAN> 
<DIV class=collapsable id=5482148700495939446>hi uncle bob,<BR>I am great fan of 
yours, i completed reading the book PPP , after reading that book, the way I 
look at the solution for a given problem is changed , I mean my thought process 
is changed when i start thinking about the design, thanks a lot for ur 
marvellous work on this area. <BR><BR>thanks Brijesh<BR><BR></DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('2204179589658893984');"><IMG class=left 
id=img2204179589658893984 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Tue, 4 Oct 2005 21:39:38, JeanW<A 
href="http://butunclebob.com/ArticleS.UncleBob.JeanW?edit">?</A>, 
Responsibility</SPAN> 
<DIV class=collapsable id=2204179589658893984>The book is great. I do have some 
deeper questions. The one I have been struggling with lately is defining a 
responsibility. You write, "In the context of the SRP, we define a 
responsibility to be 'a reason for change.'"<BR><BR>However, the word 
"responsibility" suggests that the root meaning has to do with managing some 
sort of feature, and that change is just a *symptom* of managing that feature. 
Other responsibilities lie undiscovered until a change exposes them. But I've 
had trouble defining what it is.<BR><BR>I mean, if all you wanted to convey was 
"a reason for change," then you could have called it the "Single Reason to 
Change" principle. So why did you use the word "responsibility"? And is there a 
deeper definition than "a reason for change"?</DIV></DIV>
<DIV class=collapse_rim>
<DIV class=meta style="FLOAT: right"><A href="javascript:expandAll();">Expand 
All</A> | <A href="javascript:collapseAll();">Collapse All</A></DIV><A 
href="javascript:toggleCollapsable('-6805366179403457093');"><IMG class=left 
id=img-6805366179403457093 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/collapsableOpen.gif"> 
</A>&nbsp;<SPAN class=meta>Thu, 6 Oct 2005 09:41:53, Uncle Bob, The Single 
Reason to Change Principle</SPAN> 
<DIV class=collapsable id=-6805366179403457093><BR>The principle comes from the 
work of Tom DeMarco<A 
href="http://butunclebob.com/ArticleS.UncleBob.DeMarco?edit">?</A>. I don't know 
if he's responsible for the name or whether the name is an accident of some 
kind. What I can tell you is that the definition of the principle has evolved 
over the last thirty years. It began as: <BR>
<UL>
  <LI>A module should do one thing, do it well, and do it only. </LI></UL>And it 
has finally transformed into its current form: <BR>
<UL>
  <LI>A module should have one and only one reason to change. </LI></UL>Are these 
two phrases really synonyms? I think so. I think a reasponsibility boils down to 
a reason to change. For example, consider a payroll module that pays an 
employee. We could say that the responsibility is "pay employee". However, over 
time the payment calculation rules change, even though the printed format of the 
paycheck does not. Later, the format of the check changes but the calculation 
doesn't. Clearly there are two different responsibilities. Calculation, and 
format.</DIV></DIV>
<DIV>
<HR>
<A href="http://www.objectmentor.com/"><IMG class=right 
src="ArticleS_UncleBob_PrinciplesOfObjectOrientedDesign_files/hostedByOM.gif"> 
</A><A href="http://butunclebob.com/FrontPage">Front Page</A> | <A 
href="http://butunclebob.com/RecentChanges">Recent 
Changes</A></DIV><BR></DIV></DIV></BODY></HTML>
